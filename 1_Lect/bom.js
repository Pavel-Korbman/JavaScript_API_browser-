// BOM
// BOM, –∏–ª–∏ browser object model, ‚Äî —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã,
// –ø–æ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Å–µ–º, –∫—Ä–æ–º–µ HTML-–∫–æ–¥–∞. –≠—Ç–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
// üö© –§—É–Ω–∫—Ü–∏–∏ alert/confirm/prompt
// üö© –û–±—ä–µ–∫—Ç navigator.
// üö© –û–±—ä–µ–∫—Ç location
// üö© fetch
// –†–µ–≥—É–ª–∏—Ä—É—é—Ç—Å—è –æ–Ω–∏ —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, fetch —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ WHATWG –∏ W3C

// ‚óè –û–±—ä–µ–∫—Ç navigator. –ó–¥–µ—Å—å –Ω–∞–º –≤—ã–≤–µ–¥–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ,
// –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∞–∂–Ω—ã –ø—Ä–∏
// –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ù–∞–ø—Ä–∏–º–µ—Ä:

console.log(navigator.userAgent); // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36
console.log(navigator.cookieEnabled); // true
console.log(navigator.doNotTrack); // null
console.log(navigator.platform); // Win32
console.log(navigator.geolocation); // Geolocation¬†{}

// –ó–¥–µ—Å—å:
// ‚óã userAgent ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ;
// ‚óã cookieEnabled ‚Äî –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ coockie;
// ‚óã doNotTrack ‚Äî –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ–ø—Ü–∏—è –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ;
// ‚óã platform ‚Äî —Ç–µ–∫—É—â–∞—è –û–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
// ‚óã geolocation ‚Äî –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è.

// –ü—Ä–∏–º–µ—Ä—ã

function calculateDistance(location1, location2) {
    const [lat1, lon1] = location1; // —Ä–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É
    const [lat2, lon2] = location2;

    const toRad = value => (value * Math.PI) / 180; // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
    const R = 6371; // –†–∞–¥–∏—É—Å –∑–µ–º–ª–∏ –≤ –∫–º

    const dLat = toRad(lat2 - lat1); // —Ä–∞–∑–Ω–∏—Ü–∞ —à–∏—Ä–æ—Ç—ã –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
    const dLon = toRad(lon2 - lon1); // —Ä–∞–∑–Ω–∏—Ü–∞ –¥–æ–ª–≥–æ—Ç—ã –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö

    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    const distance = R * c;

    return distance;
}

// –ù–∞–π–¥—ë–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏:
console.log('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º) = ',
    calculateDistance([55.804950, 37.548820], [55.706533, 37.583697]));
// –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º) =  11.15894543384768

// –ë–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥:

function findFastestCity(cities) {
    return new Promise((resolve, reject) => {
        if (navigator.geolocation) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            navigator.geolocation.getCurrentPosition(position => {
                const userLocation = [position.coords.latitude, position.coords.longitude];
                console.log('–Ø –Ω–∞—Ö–æ–∂—É—Å—å:', userLocation);
                // –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let closestCity = null; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞
                let shortestDistance = Infinity; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è

                cities.forEach(city => {
                    const distance = calculateDistance(userLocation, city.location);
                    if (distance < shortestDistance) {
                        closestCity = city.name;
                        shortestDistance = distance;
                        console.log(closestCity, shortestDistance);
                    }
                });
                resolve(closestCity); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥
            },
                error => {
                    if (error.code === error.PERMISSION_DENIED) { // –µ—Å–ª–∏ –æ—Ç–∫–∞–∑–∞–Ω–Ω–æ –≤ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
                        reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.'));
                    } else {
                        reject(new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.'));
                    }
                }
            );
        } else {
            reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º.'));

        }
    });
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:

const cities = [
    { name: '–ù—å—é-–ô–æ—Ä–∫', location: [40.714627, -74.002863] },
    { name: '–¢–æ–∫–∏–æ', location: [35.681729, 139.753927] },
    { name: '–õ–∏—Å—Å–∞–±–æ–Ω', location: [38.732937, -9.133962] },
    { name: '–ú–∞–¥—Ä–∏–¥', location: [40.418407, -3.712746] },
    { name: '–ü–∞—Ä–∏–∂', location: [48.856663, 2.351556] },
    { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', location: [59.938784, 30.314997] }
];

findFastestCity(cities)
    .then(closestCity => {
        console.log('–ë–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥: ', closestCity);
    })
    .catch(error => {
        console.log(error.message);
    });

//  –Ø –Ω–∞—Ö–æ–∂—É—Å—å: (2)¬†[55.7613056, 37.4833152]
//  –ù—å—é-–ô–æ—Ä–∫ 7503.1554045839985
//  –¢–æ–∫–∏–æ 7489.1880843689
//  –õ–∏—Å—Å–∞–±–æ–Ω 3896.5493018520638
//  –ú–∞–¥—Ä–∏–¥ 3432.7027423180944
//  –ü–∞—Ä–∏–∂ 2477.9476918488836
//  –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ 628.3541530179283
//  –ë–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥:  –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
